"""Sankefile for the arcane_isaac pipeline. Each rule calls a custom command-line application
with the name `arcane_isaac_rule_name_in_this_snakefile`

Some rules are only a simple wrapper around caracal tasks, but some are doing more
than calling task from some library.

For more info on the individual rules, see the correspondig python scripts!

The arcane_isaac pipleine builds the following file structure (with the pipeline
output also shown):

    working_dir/
    |
    -- snakefile #This file, created at pipeline initialisation
    |
    -- config.yaml #Created at pipeline initialisation
    |
    -- results/ #The main results from the pipeline goes here
    |   |
    |    -- ??? #Not sure what, exactly
    |
    -- logs/
    |   |
    |    -- log files from all rules
    |
    -- reports/
    |   |
    |   -- DAG of the graph (created during building phase)
    |   |
    |   -- analytics plots
    |
    -- ???/ #The rest of the directory structure is someting to be figured out
    |
    -- .snakemake/ #Hidden directory created by snakemake for pipeline handling

To visualise the pipeline logic run the following command under the working directory:

    snakemake --rulegraph | dot -Tpdf > arcane_isaac_rule_graph.pdf

NOTE: this should be done during the *init* phase...

"""
import os
import numpy as np

#=== Configuration ===
configfile: "config.yaml"

#Getting values from the config file
WORKING_dir = config['working_dir'] #Don't need this explicitly
OUTPUT_dir = config['output_dir']
LOG_dir = config['log_dir']
REPORTS_dir = config['reports_dir']
BLOB_dir = config['blob_dir']

#Aliases
CARACAL_alias = config['caracal_alias']

#Mappings
ID_AND_MS_PATH_MAPPING = config['ID_and_MS_path_mapping']

#print(type(ID_AND_MS_PATH_MAPPING))
#print(ID_AND_MS_PATH_MAPPING)

#To avoid ambiguity in wildcards, use the keys only
FIELD_IDs = list(ID_AND_MS_PATH_MAPPING.keys())

#=== Rules ===
rule all:
    input:
        '{0:s}/imaging.done'.format(OUTPUT_dir)

rule prepare_caracal_working_dir:
    input:
        ['{0:s}'.format(v) for v in ID_AND_MS_PATH_MAPPING.values()] #This is all the input MS directories
    output:
        #'{0:s}'.format(BLOB_dir) +\
        #    '/caracal_working_dir_no_{field_ID}/image_setup.txt'
        #'{0:s}/imaging.done'.format(OUTPUT_dir)
        '{0:s}'.format(BLOB_dir) +\
            '/caracal_working_dir_no_{field_ID}/caracal.done'
    params:
        blob_dir = BLOB_dir,
        #ms_name_from_map = ID_AND_MS_PATH_MAPPING[{field_ID}]
        ms_name_from_map = '{field_ID}'
    #run:
    #    print({params.ms_name_from_map})
    #    print(ID_AND_MS_PATH_MAPPING[params.ms_name_from_map])
    shell:
        "mkdir {params.blob_dir}/caracal_working_dir_no_{wildcards.field_ID} ; " +\
        "echo 'Field ID used: {wildcards.field_ID}\n' > " +\
        "{params.blob_dir}/caracal_working_dir_no_{wildcards.field_ID}/image_setup.txt"

rule run_caracal:
    input:
        '{0:s}'.format(BLOB_dir) +\
            '/caracal_working_dir_no_{field_ID}/image_setup.txt'
    output:
         '{0:s}'.format(BLOB_dir) +\
            '/caracal_working_dir_no_{field_ID}/caracal.doneA'
    shell:
        'touch {0:s}'.format(BLOB_dir) +\
            '/caracal_working_dir_no_{field_ID}/caracal.done'

rule collect_images:
    input:
        expand('{0:s}'.format(BLOB_dir) +\
            '/caracal_working_dir_no_{field_ID}/caracal.done', field_ID=list(ID_AND_MS_PATH_MAPPING.keys()))
    output:
         '{0:s}/imaging.done'.format(OUTPUT_dir)
    shell:
        'touch {0:s}/imaging.done'.format(OUTPUT_dir)