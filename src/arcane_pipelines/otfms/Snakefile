"""Sankefile for the arcane_otfms pipeline. Each rule calls a custom command-line application
with the name `arcane_otfms_rule_name_in_this_snakefile`

Some rules are only a simple wrapper around casa tasks, but some are doing more
than calling task from some library.

For more info on the individual rules, see the correspondig python scripts!

The arcane_otfms pipleine builds the following file structure (with the pipeline
output also shown):

    working_dir/
    |
    -- snakefile #This file, created at pipeline initialisation
    |
    -- config.yaml #Created at pipeline initialisation
    |
    -- results/ #The main results from the pipeline goes here
    |   |
    |    -- final.ms #The OTF format MS => this one is created here
    |   |
    |    -- otf_field_names.dat #The file containing the OTF indices and field names
    |
    -- logs/
    |   |
    |    -- log files from all rules
    |
    -- reports/
    |   |
    |   -- DAG of the graph (created during building phase)
    |   |
    |   -- analytics plots
    |
    -- blob/ #This directory might be entirely purged at the end of the pipeline completion
    |   |
    |   -- calibrators.ms #The claibrators if the split is enabled
    |   |
    |   -- otf_pointing_no_0.ms
    |   |
    |   ...
    |   |
    |   -- otf_pointing_no_N.ms
    |
    -- .snakemake/ #Hidden directory created by snakemake for pipeline handling

NOTE: this pipeline requires triple (!) the input MS size

To visualise the pipeline logic run the following command under the working directory:

    snakemake --rulegraph | dot -Tpdf > arcane_otfms_rule_graph.pdf

NOTE: this should be done during the *init* phase...

"""
import os
import numpy as np

#=== Configuration ===
configfile: "config.yaml"

#Getting values from the config file
WORKING_dir = config['working_dir'] #Don't need this explicitly
MS_dir = config['MS']
POINTING_REF_file = config['pointing_ref']
#OTF_acronym = config['OTF_acronym']
LOG_dir = config['log_dir']
REPORTS_dir = config['reports_dir']
BLOB_dir = config['blob_dir']
OUTPUT_dir = config['output_dir']
YAML_path = os.path.join(WORKING_dir, 'config.yaml')
MS_OUTPUT_NAME = config['MS_outname'] + '.ms' #Define extension here

#Aliases
CASA_alias = config['casa_alias']
CHGCENTRE_alias = config['chgcentre_alias']

#The field_ID_mapping is an ID to UNIX timestamp mapping
#We use only the keys in the Snakefile, but in the actual rules the configfile is
#used based on the ID's basically

OTF_FIELD_ID_MAPPING = config['otf_field_ID_mapping']

#To avoid ambiguity in wildcards, use the keys only
OTF_FIELD_IDs = list(OTF_FIELD_ID_MAPPING.keys())

#=============
#=== Rules ===
#=============
rule all:
    input:
        '{0:s}/otf_field_names.dat'.format(OUTPUT_dir),
        '{0:s}'.format(LOG_dir) + '/clean_up.log'

#=== First and last rule: analytics

#Plot OTF fields before correction
rule plot_input_fields:
    input:
        '{0:s}'.format(YAML_path)
    output:
    log:
        '{0:s}'.format(LOG_dir) +\
        '/plot_input_fields.log'  
    params:
        log_dir = LOG_dir,
        yaml_path = YAML_path,
        output_fname_base = 'input_fields.png'
    shell:
        "arcane_otfms_pointing_diagnostics -c {params.yaml_path} " +\
        "-o {params.output_fname_base} " +\
        ">> {params.log_dir}/plot_input_fields.log"

#=== Calibrator fields are split from the MS
#Split the calibrator field(s) from input MS
if bool(config['split_calibrators']):
    rule split_calibrators:
        input:
            '{0:s}'.format(MS_dir),
            '{0:s}'.format(LOG_dir) +\
            '/plot_input_fields.log' 
        output:
            directory('{0:s}/calibrators.ms'.format(BLOB_dir))
        log:
            '{0:s}/split_calibrators.log'.format(LOG_dir)
        params:
            yaml_path = YAML_path,
            log_dir = LOG_dir,
            casa_executable = os.path.join(BLOB_dir, 'split_calibrators.py'),
            casa_alias = CASA_alias
        shell:
            'arcane_otfms_split -c {params.yaml_path} -oc ' +\
            '> {params.log_dir}/split_calibrators.log ; ' +\
            '{params.casa_alias} --log2term --nogui --nologfile --nocrashreport -c {params.casa_executable} ' +\
            '>> {params.log_dir}/split_calibrators.log 2>&1 ; ' +\
            'arcane_otfms_split -p -c {params.yaml_path} -oc ' +\
            '>> {params.log_dir}/split_calibrators.log '
            #'mkdir {params.blob_dir}/calibrators.ms && touch {params.log_dir}/split_calibrators.log'

    #Merge phase-rotated OTF pointings and the calibrator(s)

    #NOTE: this needs to be in a different rule from ``merge_otf_pointings`` due to
    # the difference in the input patrameters, and I cannot put the if statement
    # into the input statement...

    #TO DO: maybe define a template rule for merging ?

    #NOTE: we cannot have `skip_merge` and `split calibrators` simultaneously!
    # This is taken care of in the `init_otfms` script

    rule merge_otf_pointings_and_calibrators:
        input:
            expand('{0:s}'.format(LOG_dir) +\
            '/otf_pointing_no_{field_ID}_renaming.log', field_ID=OTF_FIELD_IDs),
            expand('{0:s}'.format(BLOB_dir) +\
            '/otf_pointing_no_{field_ID}.ms', field_ID=OTF_FIELD_IDs),
            '{0:1}/calibrators.ms'.format(BLOB_dir)
        output:
            directory('{0:s}/{1:s}'.format(OUTPUT_dir, MS_OUTPUT_NAME))
        log:
            '{0:s}/merge_scans.log'.format(LOG_dir)
        params:
            yaml_path = YAML_path,
            log_dir = LOG_dir,
            #working_dir = WORKING_dir,
            #output_dir = OUTPUT_dir,
            casa_executable = os.path.join(BLOB_dir, 'merge_otf_pointings.py'),
            casa_alias = CASA_alias
        shell:
            'arcane_otfms_merge -c {params.yaml_path} ' +\
            '> {params.log_dir}/merge_scans.log ; ' +\
            '{params.casa_alias} --log2term --nogui --nologfile --nocrashreport -c {params.casa_executable} ' +\
            '>> {params.log_dir}/merge_scans.log 2>&1 ; ' +\
            'arcane_otfms_merge -p -c {params.yaml_path} ' +\
            '>> {params.log_dir}/merge_scans.log '

#=== NO calibrator fields are split from the input MS

# === Take care of the two cases of enabling/disabling the merge step

# This is a tricky situation as NO IF/ELSE statement is allowed in the input: part
# of rules. See: https://stackoverflow.com/questions/72686943/snakemake-if-else-statement-within-rule-input

# TO DO: implement rule templates to avoid rule duplication...

# My current solution: Alter the pipeline for the two cases, including having
# different all rules. A simpler solution would have been is to simply create a
# a dummy (i.e. embpty) MS, when merging is disabled. However, I feel the resulting
# DAG would be confusing, and also for the user seeing an MS created in the results/
# directory would have been confusing. And so, I decided to hide this from the end-
# user. Nonetheless, this Snakefile should be cleaned for code-clarity...

else:
    # === If we ENABLE the merge step

    if not bool(config['skip_merge']):
        #Merge phase-rotated OTF pointings and the calibrator(s) 
        rule merge_otf_pointings:
            input:
                expand('{0:s}'.format(LOG_dir) +\
                '/otf_pointing_no_{field_ID}_renaming.log', field_ID=OTF_FIELD_IDs),
                expand('{0:s}'.format(BLOB_dir) +\
                '/otf_pointing_no_{field_ID}.ms', field_ID=OTF_FIELD_IDs)
            output:
                directory('{0:s}/{1:s}'.format(OUTPUT_dir, MS_OUTPUT_NAME))
            log:
                '{0:s}/merge_scans.log'.format(LOG_dir)
            params:
                yaml_path = YAML_path,
                log_dir = LOG_dir,
                #working_dir = WORKING_dir,
                #output_dir = OUTPUT_dir,
                casa_executable = os.path.join(BLOB_dir, 'merge_otf_pointings.py'),
                casa_alias = CASA_alias
            shell:
                'arcane_otfms_merge -c {params.yaml_path} ' +\
                '> {params.log_dir}/merge_scans.log ; ' +\
                '{params.casa_alias} --log2term --nogui --nologfile --nocrashreport -c {params.casa_executable} ' +\
                '>> {params.log_dir}/merge_scans.log 2>&1 ; ' +\
                'arcane_otfms_merge -p -c {params.yaml_path} ' +\
                '>> {params.log_dir}/merge_scans.log '

# === Take care of the SKIP and ENABLE merging cases
if bool(config['skip_merge']):
    #Plot the fields after the OTF correction
    rule plot_output_fields:
        input:
            '{0:s}/otf_field_names.dat'.format(OUTPUT_dir),
            expand('{0:s}'.format(LOG_dir) +\
            '/otf_pointing_no_{field_ID}_renaming.log', field_ID=OTF_FIELD_IDs),
            expand('{0:s}'.format(BLOB_dir) +\
            '/otf_pointing_no_{field_ID}.ms', field_ID=OTF_FIELD_IDs)
        output:
        log:
            '{0:s}'.format(LOG_dir) +\
            '/plot_output_fields.log'
        params:
            log_dir = LOG_dir,
            yaml_path = YAML_path,
            output_fname_base = 'output_fields.png'
        shell:
            "arcane_otfms_pointing_diagnostics -c {params.yaml_path} " +\
            "-o {params.output_fname_base} -om " +\
            ">> {params.log_dir}/plot_output_fields.log "


else:
    #Plot the fields after the OTF correction
    rule plot_output_fields:
        input:
            '{0:s}/otf_field_names.dat'.format(OUTPUT_dir),
            '{0:s}/{1:s}'.format(OUTPUT_dir, MS_OUTPUT_NAME)
        output:
        log:
            '{0:s}'.format(LOG_dir) +\
            '/plot_output_fields.log'  
        params:
            log_dir = LOG_dir,
            yaml_path = YAML_path,
            output_fname_base = 'output_fields.png'
        shell:
            "arcane_otfms_pointing_diagnostics -c {params.yaml_path} " +\
            "-o {params.output_fname_base} -om " +\
            ">> {params.log_dir}/plot_output_fields.log "

#Clean up CASA garbage files
rule clean_up:
    input:
        '{0:s}'.format(LOG_dir) +\
        '/plot_output_fields.log',
        '{0:s}'.format(YAML_path)
    output:
    params:
        log_dir = LOG_dir,
        yaml_path = YAML_path
    log:
        '{0:s}/clean_up.log'.format(LOG_dir)
    shell:
        'arcane_otfms_clean_up -c {params.yaml_path} > {params.log_dir}/clean_up.log'

#List the new OTF pointing names
rule list_new_otf_field_names:
    input:
        '{0:s}'.format(LOG_dir) +\
        '/plot_input_fields.log' 
    output:
        '{0:s}/otf_field_names.dat'.format(OUTPUT_dir)
    log:
        '{0:s}'.format(LOG_dir) +\
        '/list_new_otf_field_names.log'
    params:
        log_dir = LOG_dir,
        yaml_path = YAML_path,
        output_fname = '{0:s}/otf_field_names.dat'.format(OUTPUT_dir)
    shell:
        'arcane_otfms_otf_pointing_correction -c {params.yaml_path} -sn -o {params.output_fname} ' +\
        '> {params.log_dir}/list_new_otf_field_names.log'

#Split a single OTF pointing from the MS
rule split_otf_scans_by_pointing:
    input:
        '{0:s}'.format(MS_dir),
        '{0:s}'.format(POINTING_REF_file),
        '{0:s}'.format(LOG_dir) +\
        '/plot_input_fields.log' 
    output:
        directory('{0:s}'.format(BLOB_dir) +\
                '/otf_pointing_no_{field_ID}.ms')
    log:
        '{0:s}'.format(LOG_dir) +\
        '/otf_pointing_no_{field_ID}_split.log'
    params:
        log_dir = LOG_dir,
        yaml_path = YAML_path,
        casa_executable = os.path.join(BLOB_dir, 'split_otf_pointing_no_{field_ID}.py'),
        casa_alias = CASA_alias
    shell:
        'arcane_otfms_split -c {params.yaml_path} -i {wildcards.field_ID} ' +\
        '> {params.log_dir}/otf_pointing_no_{wildcards.field_ID}_split.log ; ' +\
        '{params.casa_alias} --log2term --nogui --nologfile --nocrashreport -c {params.casa_executable} ' +\
        '>> {params.log_dir}/otf_pointing_no_{wildcards.field_ID}_split.log 2>&1 ; ' +\
        'arcane_otfms_split -p -c {params.yaml_path} -i {wildcards.field_ID} ' +\
        '>> {params.log_dir}/otf_pointing_no_{wildcards.field_ID}_split.log '

#Apply the phase rotation on the single pointing
rule apply_phase_rotation:
    input:
        '{0:s}'.format(BLOB_dir) +\
        '/otf_pointing_no_{field_ID}.ms',
        '{0:s}'.format(LOG_dir) +\
        '/otf_pointing_no_{field_ID}_split.log'
    output:
        #Leave empty as snakemake overwrite directories
    params:
        blob_dir = BLOB_dir,
        log_dir = LOG_dir,
        yaml_path = YAML_path,
        chgcentre_alias = CHGCENTRE_alias
    log:
        '{0:s}'.format(LOG_dir) +\
        '/otf_pointing_no_{field_ID}_chgcentre.log'
    shell:
        '{params.chgcentre_alias} {params.blob_dir}/otf_pointing_no_{wildcards.field_ID}.ms ' +\
        '$(arcane_otfms_otf_pointing_correction -c {params.yaml_path} -i {wildcards.field_ID} ' +\
        '-ds -l {params.log_dir}/otf_pointing_no_{wildcards.field_ID}_chgcentre.log) ' +\
        '>> {params.log_dir}/otf_pointing_no_{wildcards.field_ID}_chgcentre.log 2>&1'
        #'touch {params.log_dir}/otf_pointing_no_{wildcards.field_ID}_chgcentre.log'

#Rename the pointing field so later imaging processes can access it as a separate field
#IAU specifications: http://cdsweb.u-strasbg.fr/Dic/iau-spec.html
rule rename_otf_pointings:
    input:
        '{0:s}'.format(LOG_dir) +\
        '/otf_pointing_no_{field_ID}_chgcentre.log'
    output:
        #Leave empty as snakemake overwrite directories
    log:
        '{0:s}'.format(LOG_dir) +\
        '/otf_pointing_no_{field_ID}_renaming.log'
    params:
        log_dir = LOG_dir,
        yaml_path = YAML_path
    shell:
        'arcane_otfms_otf_pointing_correction -c {params.yaml_path} -i {wildcards.field_ID} ' +\
        '> {params.log_dir}/otf_pointing_no_{wildcards.field_ID}_renaming.log'

