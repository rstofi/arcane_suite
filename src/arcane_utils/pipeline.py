"""Collection of utility functions general to initializing and handling pipelines
"""

__all__ = ['argflatten', 'get_common_env_variables',
            'init_empty_config_file_with_common_variables']


import sys
import os
import logging
import configparser
import datetime

#=== Set up logging
logger = logging.getLogger(__name__)

#=== Functions ===
def argflatten(arg_list):
    """Some argparser list arguments can be actually list of lists.
    This is a simple routine to flatten list of lists to a simple list.

    Parameters
    ==========
    arg_list: list of lists
        Value of a list argument needs to be flatten
    
    Return
    ======
    arg_as_list: list
        The flattened list of lists
    
    """
    return [p for sublist in arg_list for p in sublist]

def get_common_env_variables(config_path):
	"""Read environmental variables common across ALL pipelines of arcane-suite
    during initialization

    Parameters
    ==========
    config_path: str
        Path to the config file initializing the pipeline
    
    Return
    ======
    working_dir: str
        Path to the working directory in which the pipeline will be initialized

	"""
	config = configparser.ConfigParser()
	config.read(config_path)

	working_dir = config.get('ENV','working_dir')

	return working_dir

def init_empty_config_file_with_common_variables(template_path,
                                                pipeline_name,
                                                overwrite=True):
    """Initialise config file that can be used as a basis for other code to expand
    into an empty template config file.

    Parameters:
    ===========
    template_path: str
        Path and name of the template created

    pipeline_name: str
        The name of the pipeline. Is written in the header line as an info

    overwrite: bool, opt
        If True the input file is overwritten, othervise an error is thrown

    Returns:
    ========
    Create a template config file

    """
    if os.path.exists(template_path):
        if overwrite:
            logger.debug('Overwriting existin config file: {0:s}'.format(
                        template_path))
        else:
            raise FileExistsError('Config templete already exists!')

    with open(template_path, 'w') as aconfig:
        aconfig.write('# Template {0:s} pieline config file generated by \
arcane-suit at {1:s}\n'.format(pipeline_name, str(datetime.datetime.now())))

        aconfig.write('\n[ENV]\n')

        aconfig.write(f"{'working_dir':<30}" + '= #mandatory\n')


#=== MAIN ===
if __name__ == "__main__":
    pass